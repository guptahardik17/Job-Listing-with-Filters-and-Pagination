{"version":3,"sources":["components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Cards","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortJobs","order","key","updatedList","state","jobsArray","sort","a","b","textA","toUpperCase","textB","localeCompare","setState","jobs","paginate","page","size","filterJobs","param","e","_this$setState","_this$setState2","jobsInit","companyname","length","target","value","filter","item","toLowerCase","search","skills","experience","val_to_com","Number","s","match","split","location","defineProperty","message","isLoading","bind","assertThisInitialized","previousPage","nextPage","_this2","fetch","mode","method","then","response","json","result","data","catch","error","console","log","stateArr","newPage","newCurrPage","totalPages","_this3","divStyleCard","margin","inputStyle","width","textAlign","colorGray","color","react_default","createElement","className","type","placeholder","onChange","style","onClick","disabled","map","i","index","src","alt","href","rel","Component","App","components_Cards","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAuTeA,cAnTb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA8DFI,SAAW,SAACC,EAAOC,GACjB,IAAIC,EAAcV,EAAKW,MAAMC,UAAUC,KAAK,SAACC,EAAGC,GAC9C,IAAIC,EAAQF,EAAEL,GAAKQ,cACfC,EAAQH,EAAEN,GAAKQ,cAKnB,OAHAD,EAAoB,aAAVA,GAAkC,YAAVA,EAAuB,IAAMA,EAC/DE,EAAoB,aAAVA,GAAkC,YAAVA,EAAuB,IAAMA,EAElD,QAAVV,EAEMQ,EAAMG,cAAcD,GACT,SAAVV,EAEDU,EAAMC,cAAcH,QAFtB,IAMThB,EAAKoB,SAAS,CACZR,UAAWF,EACXW,KAAMC,IAASZ,EAAaV,EAAKW,MAAMY,KAAMvB,EAAKW,MAAMa,SAlF9CxB,EAsFdyB,WAAa,SAAAC,GAAK,OAAI,SAAAC,GAGpB,IA6D+BC,EAOxBC,EApEHnB,EAAeV,EAAK8B,SA2BxB,IAxBG9B,EAAKW,MAAMoB,YAAYC,OAAS,GAAgB,gBAAVN,GAA2BC,EAAEM,OAAOC,MAAMF,OAAS,KAC1FtB,EAAcA,EAAYyB,OAAQ,SAAAC,GAChC,OAC0F,IADnFA,EAAI,YAAgBC,cAAcC,QAC5B,gBAAVZ,EAA0BC,EAAEM,OAAOC,MAAQlC,EAAKW,MAAMoB,aAAaM,mBAKvErC,EAAKW,MAAM4B,OAAOP,OAAS,GAAgB,WAAVN,GAAsBC,EAAEM,OAAOC,MAAMF,OAAS,KAChFtB,EAAcA,EAAYyB,OAAQ,SAAAC,GAChC,OACgF,IADzEA,EAAI,OAAWC,cAAcC,QACvB,WAAVZ,EAAqBC,EAAEM,OAAOC,MAAQlC,EAAKW,MAAM4B,QAAQF,kBAa7DrC,EAAKW,MAAM6B,WAAWR,OAAS,GAAgB,eAAVN,GAA0BC,EAAEM,OAAOC,MAAMF,OAAS,EAAG,CAC3F,IAAIS,EAAwB,eAAVf,EAAoD,IAA1BC,EAAEM,OAAOC,MAAMF,QAAgB,EAAIU,OAAOf,EAAEM,OAAOC,OAA4C,IAAjClC,EAAKW,MAAM6B,WAAWR,QAAgB,EAAIU,OAAO1C,EAAKW,MAAM6B,aAEnJ,IAAhBC,EACD/B,EAAcA,EAAYyB,OAAQ,SAAAC,GAChC,IAAIO,EACsB,YAAvBP,EAAI,WACLO,EAAI,CAAC,GAILA,GADUP,EAAI,WAAeQ,MAAM,OAAQ,IAAI,IACvCC,MAAM,KAGhB,GAAc,SAATF,EAAE,KACa,IAAbA,EAAEX,QAAgBS,IAAeC,OAAOC,EAAE,KAC5B,IAAbA,EAAEX,QAAgBU,OAAOC,EAAE,KAAOF,GAAcA,GAAcC,OAAOC,EAAE,KACzE,OAAOP,IAKfT,EAAEM,OAAOC,MAAQ,KAKlBlC,EAAKW,MAAMmC,SAASd,OAAS,GAAgB,aAAVN,GAAwBC,EAAEM,OAAOC,MAAMF,OAAS,KACpFtB,EAAcA,EAAYyB,OAAQ,SAAAC,GAChC,OACoF,IAD7EA,EAAI,SAAaC,cAAcC,QACzB,aAAVZ,EAAuBC,EAAEM,OAAOC,MAAQlC,EAAKW,MAAMmC,UAAUT,kBAIzC,IAAvB3B,EAAYsB,QACdhC,EAAKoB,UAALQ,EAAA,CACEhB,UAAWF,EACXW,KAAMC,IAASZ,EAAaV,EAAKW,MAAMY,KAAMvB,EAAKW,MAAMa,OAF1DvB,OAAA8C,EAAA,EAAA9C,CAAA2B,EAGGF,EAAQC,EAAEM,OAAOC,OAHpBjC,OAAA8C,EAAA,EAAA9C,CAAA2B,EAAA,WAIW,GAJXA,IAOA5B,EAAKoB,UAALS,EAAA,CACEjB,UAAWF,EACXW,KAAMC,IAASZ,EAAaV,EAAKW,MAAMY,KAAMvB,EAAKW,MAAMa,OAF1DvB,OAAA8C,EAAA,EAAA9C,CAAA4B,EAGGH,EAAQC,EAAEM,OAAOC,OAHpBjC,OAAA8C,EAAA,EAAA9C,CAAA4B,EAAA,WAIW,GAJXA,MA5JF7B,EAAKW,MAAQ,CACXC,UAAW,GACXS,KAAM,KACNU,YAAa,GACbQ,OAAQ,GACRC,WAAY,GACZM,SAAU,GACVE,QAAS,GACTC,WAAW,EACXzB,KAAM,GACND,KAAM,GAERvB,EAAK8B,SAAW,GAChB9B,EAAKyB,WAAazB,EAAKyB,WAAWyB,KAAhBjD,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAD,KAElBA,EAAKoD,aAAepD,EAAKoD,aAAaF,KAAlBjD,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAD,KACpBA,EAAKqD,SAAWrD,EAAKqD,SAASH,KAAdjD,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAD,KAEhBA,EAAKO,SAAWP,EAAKO,SAAS2C,KAAdjD,OAAAkD,EAAA,EAAAlD,QAAAkD,EAAA,EAAAlD,CAAAD,KApBJA,mFAuBM,IAAAsD,EAAAnD,KAClBoD,MAAM,8CAA+C,CACnDC,KAAM,OACNC,OAAQ,QAETC,KAAK,SAACC,GACLA,EAASC,OAAOF,KAAK,SAACG,GACpBP,EAAKxB,SAAW+B,EAAOC,KACvBR,EAAKlC,SAAS,CAAER,UAAWiD,EAAOC,KAAMzC,KAAMC,IAASuC,EAAOC,KAAMR,EAAK3C,MAAMY,KAAM+B,EAAK3C,MAAMa,MAAOyB,WAAW,QAGrHc,MACC,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,4CAKvB,IAAMG,EAAWhE,KAAKQ,MAEtB,GAAIwD,EAAS5C,KAAO,EAAG,CACrB,IAAM6C,EAAUD,EAAS5C,KAAO,EAC1B8C,EAAc/C,IAAS6C,EAASvD,UAAWwD,EAASD,EAAS3C,MAEnErB,KAAKiB,SAAS,CACZG,KAAM6C,EACN/C,KAAMgD,wCAMV,IAAMF,EAAWhE,KAAKQ,MAEtB,GAAIwD,EAAS5C,KAAO4C,EAAS9C,KAAKiD,WAAY,CAC5C,IAAMF,EAAUD,EAAS5C,KAAO,EAC1B8C,EAAc/C,IAAS6C,EAASvD,UAAWwD,EAASD,EAAS3C,MACnErB,KAAKiB,SAAS,CAAEG,KAAM6C,EAAS/C,KAAMgD,sCA8GhC,IAAAE,EAAApE,KAKDqE,EAAe,CACnBC,OAAQ,iBAGJC,EAAa,CACjBD,OAAQ,aACRE,MAAO,OACPC,UAAU,UAGNC,EAAY,CAChBC,MAAO,QAGX,OACEC,EAAAjE,EAAAkE,cAAA,WACG7E,KAAKQ,MAAMsC,UAAY8B,EAAAjE,EAAAkE,cAAA,cAAQD,EAAAjE,EAAAkE,cAAA,4BAChCD,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,aAEbF,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,OACXF,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACbF,EAAAjE,EAAAkE,cAAA,cACED,EAAAjE,EAAAkE,cAAA,SAAOE,KAAK,OACVD,UAAU,eACVE,YAAY,yBACZC,SAAUjF,KAAKsB,WAAW,eAC1B4D,MAAOX,MAKbK,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACbF,EAAAjE,EAAAkE,cAAA,cACED,EAAAjE,EAAAkE,cAAA,SAAOE,KAAK,OACVD,UAAU,eACVE,YAAY,mBACZC,SAAUjF,KAAKsB,WAAW,UAC1B4D,MAAOX,MAKbK,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACbF,EAAAjE,EAAAkE,cAAA,cACED,EAAAjE,EAAAkE,cAAA,SAAOE,KAAK,OACVD,UAAU,eACVE,YAAY,uBACZC,SAAUjF,KAAKsB,WAAW,cAC1B4D,MAAOX,MAKbK,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACbF,EAAAjE,EAAAkE,cAAA,cACED,EAAAjE,EAAAkE,cAAA,SAAOE,KAAK,OACVD,UAAU,eACVE,YAAY,qBACZC,SAAUjF,KAAKsB,WAAW,YAC1B4D,MAAOX,OAMfK,EAAAjE,EAAAkE,cAAA,WACAD,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,OAEbF,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACXF,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,kBAAkBI,MAAOX,EAAYY,QAAS,kBAAMf,EAAKhE,SAAS,MAAM,cAAxG,2BAGJwE,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACXF,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,kBAAkBI,MAAOX,EAAYY,QAAS,kBAAMf,EAAKhE,SAAS,OAAO,cAAzG,4BAGJwE,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACXF,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,kBAAkBI,MAAOX,EAAYY,QAAS,kBAAMf,EAAKhE,SAAS,MAAM,gBAAxG,6BAGJwE,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,8BACXF,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,kBAAkBI,MAAOX,EAAYY,QAAS,kBAAMf,EAAKhE,SAAS,OAAO,gBAAzG,+BAINwE,EAAAjE,EAAAkE,cAAA,cAAQD,EAAAjE,EAAAkE,cAAA,WAAMD,EAAAjE,EAAAkE,cAAA,mBAAW7E,KAAKQ,MAAMC,UAAUoB,OAAhC,OAA4C7B,KAAK2B,SAASE,OAA1D,WACd+C,EAAAjE,EAAAkE,cAAA,WACAD,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,OACbF,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,iCACbF,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,oDACbF,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,eAAeK,QAASnF,KAAKiD,cAA7D,YACA2B,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,gBAAgBM,UAAQ,GAAxD,IAA2DpF,KAAKQ,MAAMY,KAAtE,KACAwD,EAAAjE,EAAAkE,cAAA,UAAQE,KAAK,SAASD,UAAU,eAAeK,QAASnF,KAAKkD,UAA7D,iBAOPlD,KAAKQ,MAAMU,MAAQlB,KAAKQ,MAAMU,KAAKiD,WAAanE,KAAKQ,MAAMY,MAAQpB,KAAKQ,MAAMU,KAAKiD,WAAa,EAAIS,EAAAjE,EAAAkE,cAAA,cAAQD,EAAAjE,EAAAkE,cAAA,WAAMD,EAAAjE,EAAAkE,cAAA,MAAIK,MAAOR,GAAX,sEAA+G,KAEhO1E,KAAKQ,MAAMqC,QAAU+B,EAAAjE,EAAAkE,cAAA,cAAQD,EAAAjE,EAAAkE,cAAA,WAAMD,EAAAjE,EAAAkE,cAAA,MAAIK,MAAOR,GAAX,uBAErCE,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,aAAaI,MA3GX,CACnBZ,OAAQ,gBA4GLtE,KAAKQ,MAAMU,MAAQlB,KAAKQ,MAAMU,KAAKyC,KAAK0B,IAAI,SAACC,EAAEC,GAC9C,OACEX,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,6BAA6BxE,IAAKiF,GAC/CX,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,OAAOI,MAAOb,GAC3BO,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,eAAeU,IAAI,wBAAwBC,IAAI,mBAC9Db,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,aACbF,EAAAjE,EAAAkE,cAAA,MAAIC,UAAU,cAAcQ,EAAC,aAC7BV,EAAAjE,EAAAkE,cAAA,KAAGC,UAAU,aAAaQ,EAAC,QAE7BV,EAAAjE,EAAAkE,cAAA,MAAIC,UAAU,+BACZF,EAAAjE,EAAAkE,cAAA,MAAIC,UAAU,mBAAd,eAA6CQ,EAAC,YAC9CV,EAAAjE,EAAAkE,cAAA,MAAIC,UAAU,mBAAd,WAAyCQ,EAAC,QAC1CV,EAAAjE,EAAAkE,cAAA,MAAIC,UAAU,mBAAd,aAA2CQ,EAAC,WAE9CV,EAAAjE,EAAAkE,cAAA,OAAKC,UAAU,aACbF,EAAAjE,EAAAkE,cAAA,KAAGa,KAAMJ,EAAC,UAAeR,UAAU,YAAYhD,OAAO,SAAS6D,IAAI,uBAAnE,2BAvSEC,aCWLC,mLARX,OACIjB,EAAAjE,EAAAkE,cAAA,WACED,EAAAjE,EAAAkE,cAACiB,EAAD,cALQF,aCSEG,QACW,cAA7BC,OAAOrD,SAASsD,UAEe,UAA7BD,OAAOrD,SAASsD,UAEhBD,OAAOrD,SAASsD,SAASxD,MACvB,2DCZNyD,IAASC,OAAOvB,EAAAjE,EAAAkE,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.7be2817a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport paginate from 'paginate-array';\n\nclass Cards extends Component {\n  constructor() {\n    super()\n    this.state = {\n      jobsArray: [],\n      jobs: null,\n      companyname: '',\n      skills: '',\n      experience: '',\n      location: '',\n      message: '',\n      isLoading: true,\n      size: 20,\n      page: 1\n    }\n    this.jobsInit = [];\n    this.filterJobs = this.filterJobs.bind(this);\n\n    this.previousPage = this.previousPage.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n\n    this.sortJobs = this.sortJobs.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://nut-case.s3.amazonaws.com/jobs.json', {\n      mode: 'cors',\n      method: 'GET'\n    })\n    .then((response) => {\n      response.json().then((result)=>{\n        this.jobsInit = result.data;\n        this.setState({ jobsArray: result.data, jobs: paginate(result.data, this.state.page, this.state.size) ,isLoading: false})\n      })\n    })\n    .catch(\n      error => console.log(error)\n    )\n  }\n\n  previousPage() {\n    const stateArr = this.state;\n\n    if (stateArr.page > 1) {\n      const newPage = stateArr.page - 1;\n      const newCurrPage = paginate(stateArr.jobsArray, newPage, stateArr.size);\n\n      this.setState({\n        page: newPage,\n        jobs: newCurrPage\n      });\n    }\n  }\n\n  nextPage() {\n    const stateArr = this.state;\n    \n    if (stateArr.page < stateArr.jobs.totalPages) {\n      const newPage = stateArr.page + 1;\n      const newCurrPage = paginate(stateArr.jobsArray, newPage, stateArr.size);\n      this.setState({ page: newPage, jobs: newCurrPage });\n    }\n  }\n\n  sortJobs = (order, key) => {\n    var updatedList = this.state.jobsArray.sort((a, b) => {\n      var textA = a[key].toUpperCase();\n      var textB = b[key].toUpperCase();\n\n      textA = ((textA === \"FRESHERS\" || textA === \"FRESHER\") ? '0' : textA);\n      textB = ((textB === \"FRESHERS\" || textB === \"FRESHER\") ? '0' : textB);\n\n      if(order === \"ASC\"){\n        // return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        return textA.localeCompare(textB);\n      } else if(order === \"DESC\"){\n        // return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n        return textB.localeCompare(textA);\n      }\n    });\n\n    this.setState({\n      jobsArray: updatedList,\n      jobs: paginate(updatedList, this.state.page, this.state.size)\n    });\n  }\n\n  filterJobs = param => e =>\n  { \n    // Filtering data from full job list\n    var updatedList =  this.jobsInit;\n    \n    // Filter Based on company name\n    if(this.state.companyname.length > 0 || (param === 'companyname' && e.target.value.length > 0)){\n      updatedList = updatedList.filter((item => {\n        return item['companyname'].toLowerCase().search(\n          (param === 'companyname' ? e.target.value : this.state.companyname).toLowerCase()) !== -1;\n      }));\n    }\n\n    // Filter Based on skills\n    if(this.state.skills.length > 0 || (param === 'skills' && e.target.value.length > 0)){\n      updatedList = updatedList.filter((item => {\n        return item['skills'].toLowerCase().search(\n          (param === 'skills' ? e.target.value : this.state.skills).toLowerCase()) !== -1;\n      }));\n    }\n\n    // if(this.state.experience.length > 0){\n    //   updatedList = updatedList.filter((item => {\n    //     return item['experience'].toLowerCase().search(\n    //       (param === 'experience' ? e.target.value : this.state.experience).toLowerCase()) !== -1;\n    //   }));\n    // }\n\n    \n    // Filter Based on experience\n    if(this.state.experience.length > 0 || (param === 'experience' && e.target.value.length > 0)){\n      var val_to_com = (param === 'experience' ? (e.target.value.length === 0 ? -1 : Number(e.target.value)) : (this.state.experience.length === 0 ? -1 : Number(this.state.experience)));\n      \n      if(val_to_com !== -1){\n        updatedList = updatedList.filter((item => {\n          var s;\n          if(item['experience'] === 'Fresher'){\n            s = [0]\n          }\n          else{\n            var str = item['experience'].match(/\\d+/g, \"\")+'';\n            s = str.split(',');\n          }\n          \n          if(!(s[0] === \"null\")){\n            if( (s.length === 1 && val_to_com === Number(s[0]))\n              || (s.length === 2 && Number(s[0]) <= val_to_com && val_to_com <= Number(s[1]))){\n                return item;\n            }\n          }\n        }));      \n      } else{\n        e.target.value = '';\n      }\n    }\n\n    // Filter Based on Location\n    if(this.state.location.length > 0 || (param === 'location' && e.target.value.length > 0)){\n      updatedList = updatedList.filter((item => {\n        return item['location'].toLowerCase().search(\n          (param === 'location' ? e.target.value : this.state.location).toLowerCase()) !== -1;\n      }));\n    }\n        \n    if (updatedList.length === 0 ) {\n      this.setState({\n        jobsArray: updatedList,\n        jobs: paginate(updatedList, this.state.page, this.state.size),\n        [param]: e.target.value,\n        message: true\n      });\n    } else {\n      this.setState({\n        jobsArray: updatedList,\n        jobs: paginate(updatedList, this.state.page, this.state.size),\n        [param]: e.target.value,\n        message: false,\n      });\n    }\n\n  }\n\n\n  render() {\n    const divStyleMain = {\n      margin: '3% 5% 5% 5%'\n    };\n\n    const divStyleCard = {\n      margin: '10px 0 10px 0'\n    };\n\n    const inputStyle = {\n      margin: '20px 0 0 0',\n      width: '100%',\n      textAlign:'center'\n    };  \n\n    const colorGray = {\n      color: 'gray'\n    };  \n\n  return (\n    <div>\n      {this.state.isLoading ? <center><h5> Loading ... </h5></center> : (\n      <div className=\"container\">\n        \n        <div className=\"row\">\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n              <center>\n                <input type=\"text\"\n                  className=\"center-block\"\n                  placeholder=\"Search By Company Name\"\n                  onChange={this.filterJobs(\"companyname\")}\n                  style={inputStyle}\n                />\n              </center>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n              <center>\n                <input type=\"text\"\n                  className=\"center-block\"\n                  placeholder=\"Search By Skills\"\n                  onChange={this.filterJobs(\"skills\")}\n                  style={inputStyle}\n                />\n              </center>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n              <center>\n                <input type=\"text\"\n                  className=\"center-block\"\n                  placeholder=\"Search By Experience\"\n                  onChange={this.filterJobs(\"experience\")}\n                  style={inputStyle}\n                />\n              </center>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n              <center>\n                <input type=\"text\"\n                  className=\"center-block\"\n                  placeholder=\"Search By Location\"\n                  onChange={this.filterJobs(\"location\")}\n                  style={inputStyle}\n                />\n              </center>\n            </div>\n          </div>\n        \n          <br />\n          <div className=\"row\">\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                <button type=\"button\" className=\"btn btn-primary\" style={inputStyle} onClick={() => this.sortJobs(\"ASC\",\"location\")}>Sort by Location (ASC)</button>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                <button type=\"button\" className=\"btn btn-primary\" style={inputStyle} onClick={() => this.sortJobs(\"DESC\",\"location\")}>Sort by Location (DESC)</button>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                <button type=\"button\" className=\"btn btn-primary\" style={inputStyle} onClick={() => this.sortJobs(\"ASC\",\"experience\")}>Sort by Experience (ASC)</button>\n            </div>\n\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                <button type=\"button\" className=\"btn btn-primary\" style={inputStyle} onClick={() => this.sortJobs(\"DESC\",\"experience\")}>Sort by Experience (DESC)</button>\n            </div>\n\n          </div>\n          <center><br /><h5>Total {this.state.jobsArray.length} of {this.jobsInit.length} Found</h5></center>\n          <br />\n          <div className=\"row\">\n            <div className=\"col-sm-12 col-md-12 col-lg-12\">\n              <div className=\"d-flex justify-content-center align-items-center\">\n                <button type=\"button\" className=\"btn btn-info\" onClick={this.previousPage}>Previous</button>\n                <button type=\"button\" className=\"btn btn-light\" disabled> {this.state.page} </button>\n                <button type=\"button\" className=\"btn btn-info\" onClick={this.nextPage}>Next Page</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n        {this.state.jobs ? (this.state.jobs.totalPages < this.state.page && this.state.jobs.totalPages > 0 ? <center><br /><h5 style={colorGray}> Oops!! Go to page number 1, Jobs are less based on your search. </h5></center>: null) : null}\n\n        { this.state.message ? <center><br /><h5 style={colorGray}> No Records Found </h5></center> : (\n        \n        <div className=\"card-group\" style={divStyleMain}>\n\n        {this.state.jobs && this.state.jobs.data.map((i,index) => {\n          return(\n            <div className=\"col-sm-6 col-md-4 col-lg-3\" key={index}>\n              <div className=\"card\" style={divStyleCard}>\n                <img className=\"card-img-top\" src=\"./images/download.png\" alt=\"247 x 180 Size\" />\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{i['companyname']}</h5>\n                  <p className=\"card-text\">{i['title']}</p>\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                  <li className=\"list-group-item\">Experience: {i['experience']}</li>\n                  <li className=\"list-group-item\">Skills: {i['skills']}</li>\n                  <li className=\"list-group-item\">Location: {i['location']}</li>\n                </ul>\n                <div className=\"card-body\">\n                  <a href={i['applylink']} className=\"card-link\" target=\"_blank\" rel=\"noopener noreferrer\">Apply Now</a>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n      )}\n    </div>\n  );\n  }\n}\n\nexport default Cards;\n","import React, { Component } from 'react';\nimport Cards from './components/Cards.js';\n\nclass App extends Component {\n\n  render() {\n    return (\n        <div>\n          <Cards />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}